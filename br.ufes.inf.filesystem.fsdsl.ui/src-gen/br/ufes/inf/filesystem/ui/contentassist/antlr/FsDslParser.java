/*
* generated by Xtext
*/
package br.ufes.inf.filesystem.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import br.ufes.inf.filesystem.services.FsDslGrammarAccess;

public class FsDslParser extends AbstractContentAssistParser {
	
	@Inject
	private FsDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected br.ufes.inf.filesystem.ui.contentassist.antlr.internal.InternalFsDslParser createParser() {
		br.ufes.inf.filesystem.ui.contentassist.antlr.internal.InternalFsDslParser result = new br.ufes.inf.filesystem.ui.contentassist.antlr.internal.InternalFsDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getFilesystemAccess().getGroup(), "rule__Filesystem__Group__0");
					put(grammarAccess.getFilesystemAccess().getGroup_1(), "rule__Filesystem__Group_1__0");
					put(grammarAccess.getFolderAccess().getGroup(), "rule__Folder__Group__0");
					put(grammarAccess.getFolderAccess().getGroup_3(), "rule__Folder__Group_3__0");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getFilesystemAccess().getNodesAssignment_1_0(), "rule__Filesystem__NodesAssignment_1_0");
					put(grammarAccess.getFilesystemAccess().getNodesAssignment_1_1(), "rule__Filesystem__NodesAssignment_1_1");
					put(grammarAccess.getFolderAccess().getNameAssignment_1(), "rule__Folder__NameAssignment_1");
					put(grammarAccess.getFolderAccess().getNodesAssignment_3_0(), "rule__Folder__NodesAssignment_3_0");
					put(grammarAccess.getFolderAccess().getNodesAssignment_3_1(), "rule__Folder__NodesAssignment_3_1");
					put(grammarAccess.getFileAccess().getNameAssignment_1(), "rule__File__NameAssignment_1");
					put(grammarAccess.getLinkAccess().getNameAssignment_0(), "rule__Link__NameAssignment_0");
					put(grammarAccess.getLinkAccess().getNodeAssignment_2(), "rule__Link__NodeAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			br.ufes.inf.filesystem.ui.contentassist.antlr.internal.InternalFsDslParser typedParser = (br.ufes.inf.filesystem.ui.contentassist.antlr.internal.InternalFsDslParser) parser;
			typedParser.entryRuleFilesystem();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FsDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
