/*
* generated by Xtext
*/
grammar InternalFsDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.ufes.inf.filesystem.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufes.inf.filesystem.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufes.inf.filesystem.services.FsDslGrammarAccess;

}

@parser::members {

 	private FsDslGrammarAccess grammarAccess;
 	
    public InternalFsDslParser(TokenStream input, FsDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Filesystem";	
   	}
   	
   	@Override
   	protected FsDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFilesystem
entryRuleFilesystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilesystemRule()); }
	 iv_ruleFilesystem=ruleFilesystem 
	 { $current=$iv_ruleFilesystem.current; } 
	 EOF 
;

// Rule Filesystem
ruleFilesystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFilesystemAccess().getFilesystemAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFilesystemAccess().getNodesNodeParserRuleCall_1_0_0()); 
	    }
		lv_nodes_1_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilesystemRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_1_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilesystemAccess().getNodesNodeParserRuleCall_1_1_0()); 
	    }
		lv_nodes_2_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilesystemRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_2_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getFolderParserRuleCall_0()); 
    }
    this_Folder_0=ruleFolder
    { 
        $current = $this_Folder_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getFileParserRuleCall_1()); 
    }
    this_File_1=ruleFile
    { 
        $current = $this_File_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getLinkParserRuleCall_2()); 
    }
    this_Link_2=ruleLink
    { 
        $current = $this_Link_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFolder
entryRuleFolder returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFolderRule()); }
	 iv_ruleFolder=ruleFolder 
	 { $current=$iv_ruleFolder.current; } 
	 EOF 
;

// Rule Folder
ruleFolder returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFolderAccess().getFolderAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFolderAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFolderRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFolderAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFolderAccess().getNodesNodeParserRuleCall_3_0_0()); 
	    }
		lv_nodes_3_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFolderRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_3_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFolderAccess().getNodesNodeParserRuleCall_3_1_0()); 
	    }
		lv_nodes_4_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFolderRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_4_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFolderAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFileAccess().getFileAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkAccess().getGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getNodeNodeCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


