/*
* generated by Xtext
*/

package br.ufes.inf.filesystem.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FsDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FilesystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filesystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFilesystemAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_1_0_0 = (RuleCall)cNodesAssignment_1_0.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_1_1_0 = (RuleCall)cNodesAssignment_1_1.eContents().get(0);
		
		//Filesystem:
		//	{Filesystem} (nodes+=Node nodes+=Node*)?;
		public ParserRule getRule() { return rule; }

		//{Filesystem} (nodes+=Node nodes+=Node*)?
		public Group getGroup() { return cGroup; }

		//{Filesystem}
		public Action getFilesystemAction_0() { return cFilesystemAction_0; }

		//(nodes+=Node nodes+=Node*)?
		public Group getGroup_1() { return cGroup_1; }

		//nodes+=Node
		public Assignment getNodesAssignment_1_0() { return cNodesAssignment_1_0; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_1_0_0() { return cNodesNodeParserRuleCall_1_0_0; }

		//nodes+=Node*
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_1_1_0() { return cNodesNodeParserRuleCall_1_1_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFolderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node:
		//	Folder | File | Link;
		public ParserRule getRule() { return rule; }

		//Folder | File | Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//Folder
		public RuleCall getFolderParserRuleCall_0() { return cFolderParserRuleCall_0; }

		//File
		public RuleCall getFileParserRuleCall_1() { return cFileParserRuleCall_1; }

		//Link
		public RuleCall getLinkParserRuleCall_2() { return cLinkParserRuleCall_2; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class FolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Folder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFolderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNodesNodeParserRuleCall_3_0_0 = (RuleCall)cNodesAssignment_3_0.eContents().get(0);
		private final Assignment cNodesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_3_1_0 = (RuleCall)cNodesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Folder:
		//	{Folder} name=EString "{" (nodes+=Node nodes+=Node*)? "}";
		public ParserRule getRule() { return rule; }

		//{Folder} name=EString "{" (nodes+=Node nodes+=Node*)? "}"
		public Group getGroup() { return cGroup; }

		//{Folder}
		public Action getFolderAction_0() { return cFolderAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(nodes+=Node nodes+=Node*)?
		public Group getGroup_3() { return cGroup_3; }

		//nodes+=Node
		public Assignment getNodesAssignment_3_0() { return cNodesAssignment_3_0; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_3_0_0() { return cNodesNodeParserRuleCall_3_0_0; }

		//nodes+=Node*
		public Assignment getNodesAssignment_3_1() { return cNodesAssignment_3_1; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_3_1_0() { return cNodesNodeParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//File:
		//	{File} name=EString;
		public ParserRule getRule() { return rule; }

		//{File} name=EString
		public Group getGroup() { return cGroup; }

		//{File}
		public Action getFileAction_0() { return cFileAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodeNodeCrossReference_2_0 = (CrossReference)cNodeAssignment_2.eContents().get(0);
		private final RuleCall cNodeNodeEStringParserRuleCall_2_0_1 = (RuleCall)cNodeNodeCrossReference_2_0.eContents().get(1);
		
		//// FIXME it uses the name of node as reference, it should be a path.
		//Link:
		//	name=EString ">" node=[Node|EString];
		public ParserRule getRule() { return rule; }

		//name=EString ">" node=[Node|EString]
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//node=[Node|EString]
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }

		//[Node|EString]
		public CrossReference getNodeNodeCrossReference_2_0() { return cNodeNodeCrossReference_2_0; }

		//EString
		public RuleCall getNodeNodeEStringParserRuleCall_2_0_1() { return cNodeNodeEStringParserRuleCall_2_0_1; }
	}
	
	
	private FilesystemElements pFilesystem;
	private NodeElements pNode;
	private EStringElements pEString;
	private FolderElements pFolder;
	private FileElements pFile;
	private LinkElements pLink;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FsDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Filesystem:
	//	{Filesystem} (nodes+=Node nodes+=Node*)?;
	public FilesystemElements getFilesystemAccess() {
		return (pFilesystem != null) ? pFilesystem : (pFilesystem = new FilesystemElements());
	}
	
	public ParserRule getFilesystemRule() {
		return getFilesystemAccess().getRule();
	}

	//Node:
	//	Folder | File | Link;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Folder:
	//	{Folder} name=EString "{" (nodes+=Node nodes+=Node*)? "}";
	public FolderElements getFolderAccess() {
		return (pFolder != null) ? pFolder : (pFolder = new FolderElements());
	}
	
	public ParserRule getFolderRule() {
		return getFolderAccess().getRule();
	}

	//File:
	//	{File} name=EString;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//// FIXME it uses the name of node as reference, it should be a path.
	//Link:
	//	name=EString ">" node=[Node|EString];
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
